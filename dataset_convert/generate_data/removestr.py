import re
import os
import json
import argparse
import random

parser = argparse.ArgumentParser()
parser.add_argument('--in_path', type=str,
                    default="/mnt/3_new-try/task_augment/codes/now_use/text2text-generate/generate_data/",
                    help='input directory')
parser.add_argument('--out_path', type=str,
                    default="/mnt/3_new-try/task_augment/codes/now_use/text2text-generate/generate_data/",
                    help='output directory')
args = parser.parse_args()


def preprocess_doc(json_str):
    doc_item = json.loads(json_str)
    doc_text = doc_item["sentence1"]
    doc_text = re.sub("[\n ]+", "", doc_text)
    doc_item["sentence1"] = doc_text
    doc_text = doc_item["sentence2"]
    doc_text = re.sub("[\n ]+", "", doc_text)
    doc_item["sentence2"] = doc_text
    return doc_item


def transform(str1):
    input_file = open(args.in_path + str1 + ".json", "r", encoding='utf-8')
    output_file1 = open(args.out_path + "neutral_" + str1 + ".json", "w", encoding='utf-8')
    output_file2 = open(args.out_path + "entailment_" + str1 + ".json", "w", encoding='utf-8')
    output_file3 = open(args.out_path + "contradiction_" + str1 + ".json", "w", encoding='utf-8')
    print("Reading from {}, writing to {},{},{}".format(input_file.name, output_file1.name, output_file2.name,
                                                        output_file3.name))

    neutral = 0
    entailment = 0
    contradiction = 0
    for line in input_file.readlines():
        doc_item = preprocess_doc(line.strip())
        new_doc_item_neutral = {}
        new_doc_item_entailment = {}
        new_doc_item_contradiction = {}
        if doc_item["label"] == "neutral":
            neutral += 1
            new_doc_item_neutral["id"] = doc_item["id"]
            new_doc_item_neutral["prem_id"] = doc_item["prem_id"]
            new_doc_item_neutral["level"] = doc_item["level"]
            new_doc_item_neutral["genre"] = doc_item["genre"]
            new_doc_item_neutral["label"] = doc_item["label"]
            new_doc_item_neutral["sentence1"] = doc_item["sentence1"]
            new_doc_item_neutral["sentence2"] = doc_item["sentence2"]
            output_file1.write(json.dumps(new_doc_item_neutral, ensure_ascii=False) + "\n")
        elif doc_item["label"] == "entailment":
            entailment += 1
            new_doc_item_entailment["id"] = doc_item["id"]
            new_doc_item_entailment["prem_id"] = doc_item["prem_id"]
            new_doc_item_entailment["level"] = doc_item["level"]
            new_doc_item_entailment["genre"] = doc_item["genre"]
            new_doc_item_entailment["label"] = doc_item["label"]
            new_doc_item_entailment["sentence1"] = doc_item["sentence1"]
            new_doc_item_entailment["sentence2"] = doc_item["sentence2"]
            output_file2.write(json.dumps(new_doc_item_entailment, ensure_ascii=False) + "\n")
        elif doc_item["label"] == "contradiction":
            contradiction += 1
            new_doc_item_contradiction["id"] = doc_item["id"]
            new_doc_item_contradiction["prem_id"] = doc_item["prem_id"]
            new_doc_item_contradiction["level"] = doc_item["level"]
            new_doc_item_contradiction["genre"] = doc_item["genre"]
            new_doc_item_contradiction["label"] = doc_item["label"]
            new_doc_item_contradiction["sentence1"] = doc_item["sentence1"]
            new_doc_item_contradiction["sentence2"] = doc_item["sentence2"]
            output_file3.write(json.dumps(new_doc_item_contradiction, ensure_ascii=False) + "\n")
    print("neutral:", neutral, "  entailment:", entailment, "  contradiction:", contradiction)


def convert_merge(src_d, str11):
    input_file = open(args.in_path + src_d + str11, "r", encoding="utf-8")
    output_file_reverse = open(args.in_path + src_d + "new_" + str11, "w", encoding="utf-8")
    print("Reading from {}, writing to {}".format(input_file.name, output_file_reverse.name))

    for line in input_file.readlines():
        doc_item = preprocess_doc(line.strip())
        new_doc_item = {}
        new_doc_item["label"] = doc_item["label"][:-2]
        new_doc_item["sentence1"] = doc_item["sentence1"]
        new_doc_item["sentence2"] = doc_item["sentence2"]
        output_file_reverse.write(json.dumps(new_doc_item, ensure_ascii=False) + "\n")

    output_file_reverse.close()


def generate_random():
    index_list = []
    for i in range(12287):
        index_list.append(i)
    new_index_list = random.sample(index_list, 1000)
    print(new_index_list)
    index_list = []
    for i in range(10860):
        index_list.append(i)
    new_index_list = random.sample(index_list, 1000)
    print(new_index_list)


def extract():
    pre="new_generate/"
    input_file1 = open(args.in_path + pre + "NLI_train.json", "r", encoding="utf-8")
    input_file2 = open(args.in_path + pre + "NLI_fu_train.json", "r", encoding="utf-8")
    input_file3 = open(args.in_path + pre + "NLI_chu_test.json", "r", encoding="utf-8")
    output_file_train = open(args.in_path + pre + "NLI_new_train.json", "w", encoding="utf-8")
    output_file_infer = open(args.in_path + pre + "NLI_new_infer.json", "w", encoding="utf-8")
    print("Reading from {}{}, writing to {}{}".format(
        input_file1.name, input_file2.name, output_file_train.name, output_file_infer.name))
    new_index_list = [2312, 10649, 1740, 11237, 11909, 11183, 5315, 12236, 10837, 710, 5413, 7241, 1721, 11070, 3949, 838, 11971, 8081, 1987, 11983, 11917, 9404, 8277, 9746, 11452, 5300, 6642, 2705, 10201, 8042, 11888, 5745, 4720, 11709, 11739, 7651, 10476, 3203, 3055, 4369, 1823, 10745, 1414, 4298, 1562, 4960, 4062, 8180, 6858, 4123, 207, 5325, 2892, 2102, 7885, 6338, 10599, 1117, 4930, 9436, 10630, 7490, 11752, 9308, 4835, 11147, 3200, 2339, 11089, 2582, 9959, 9484, 11984, 9070, 5336, 2844, 10010, 599, 10419, 6260, 1646, 3552, 6802, 6604, 790, 12099, 4747, 7468, 6650, 4321, 2872, 10655, 727, 9861, 8279, 2836, 9051, 10991, 2228, 10437, 6653, 7144, 4727, 190, 313, 11895, 8307, 7974, 5207, 2377, 1046, 11706, 5409, 8343, 6081, 9804, 7477, 10316, 9481, 7648, 3610, 11756, 4693, 4962, 8682, 12132, 9760, 10903, 8305, 701, 10499, 5822, 9832, 9734, 12110, 5307, 1934, 8267, 10079, 10762, 7652, 6762, 6207, 5304, 2107, 2411, 6340, 6403, 5102, 4719, 6626, 277, 7060, 9290, 9449, 4216, 7021, 10592, 8499, 8046, 5005, 839, 5740, 12215, 2229, 11597, 8583, 4231, 6291, 11713, 8411, 9371, 11831, 2899, 10881, 10731, 5175, 11944, 7092, 9237, 6480, 1643, 2218, 11380, 4709, 4488, 11081, 3297, 668, 8467, 10544, 11090, 2477, 2817, 3806, 11422, 11559, 4889, 4530, 3938, 1150, 4338, 5073, 1434, 8293, 208, 8705, 478, 7251, 10070, 2500, 10552, 8188, 2615, 8710, 6056, 164, 11499, 7066, 2296, 9519, 1860, 10610, 831, 10068, 7760, 8217, 10902, 10163, 5372, 7605, 9785, 4545, 216, 12170, 6119, 1258, 700, 7504, 3370, 5277, 11956, 2316, 7052, 10218, 2461, 3072, 11763, 5523, 9419, 10317, 3804, 7688, 3082, 6084, 4573, 3851, 3844, 7298, 995, 11563, 10934, 1011, 12151, 11210, 7993, 1424, 5087, 9490, 9580, 6420, 704, 7431, 5463, 10354, 9348, 5364, 6656, 6148, 1885, 7334, 10097, 7400, 6777, 5990, 4913, 9044, 5496, 9562, 3478, 8978, 8430, 6514, 12224, 11276, 8736, 7441, 6792, 1956, 10845, 1636, 605, 3458, 5448, 302, 9948, 1998, 1348, 2855, 3417, 11762, 847, 5586, 12106, 6149, 2765, 5667, 9514, 10620, 3909, 1261, 4572, 8904, 12048, 4638, 7949, 12105, 10272, 3368, 964, 11889, 4687, 3262, 3901, 8745, 1608, 8423, 11661, 7061, 6562, 322, 10371, 9417, 1137, 3606, 8671, 4489, 5687, 9130, 8570, 334, 9321, 1263, 3265, 6975, 4113, 4168, 5421, 1916, 4769, 172, 1295, 4661, 9584, 8225, 11133, 2579, 146, 8969, 6708, 2233, 4723, 10833, 8360, 9704, 6155, 8171, 4581, 10168, 898, 1565, 3589, 8900, 2081, 2061, 4695, 1187, 342, 2786, 9932, 5722, 1794, 10376, 2271, 7248, 6800, 6552, 6675, 3345, 3316, 10979, 421, 378, 10880, 3599, 11004, 8005, 3083, 5432, 7814, 9238, 1892, 3127, 5955, 10533, 6267, 8744, 2141, 9243, 9205, 835, 5374, 4603, 5069, 4701, 11413, 4880, 2028, 8331, 11290, 11960, 1014, 10884, 6352, 3713, 9690, 8020, 6010, 1832, 153, 5505, 4656, 10287, 553, 9731, 8414, 1703, 7299, 2445, 6178, 8152, 10101, 10861, 9887, 7237, 10615, 5411, 5017, 9899, 5800, 12145, 8139, 6553, 6345, 7960, 7235, 8519, 10048, 8251, 7384, 452, 2828, 7918, 6839, 11533, 7311, 11108, 10512, 9599, 10165, 491, 2768, 11647, 10618, 4414, 10717, 7091, 8837, 11999, 6026, 113, 362, 5909, 11868, 10506, 10756, 10586, 8846, 9283, 10824, 4067, 2106, 9587, 1884, 11266, 9127, 7520, 3880, 4636, 5061, 8598, 720, 3014, 4963, 7131, 8840, 7586, 7355, 1480, 6279, 4031, 5503, 5305, 393, 7073, 10369, 1645, 8742, 7270, 11086, 1506, 4758, 85, 2442, 12114, 994, 4115, 11794, 11016, 4891, 12086, 6223, 8619, 10866, 2458, 6122, 12207, 9634, 3879, 3039, 6948, 2261, 6168, 10014, 9961, 10789, 3146, 8723, 2062, 3277, 4682, 1061, 1135, 2431, 8575, 4570, 6107, 874, 7753, 4737, 8250, 4684, 6761, 7791, 2132, 833, 648, 9632, 1145, 1655, 3275, 6222, 8707, 8408, 1012, 4465, 9430, 2491, 4008, 4327, 8347, 11443, 5430, 10508, 11500, 9428, 6157, 8888, 6581, 979, 2506, 62, 249, 4974, 4668, 3209, 5164, 196, 7892, 5801, 9644, 2273, 4901, 9095, 2605, 1202, 803, 3102, 8988, 4382, 9477, 6946, 3801, 136, 10939, 7418, 10433, 7379, 6569, 11643, 11168, 10240, 2580, 11426, 2222, 11968, 5097, 3081, 11359, 3803, 1912, 11955, 3382, 4475, 8980, 6007, 9040, 523, 11957, 10660, 9521, 538, 11387, 374, 8198, 8530, 5045, 4301, 8990, 5670, 5959, 2017, 4525, 5783, 7365, 7333, 12187, 11595, 3632, 2847, 6955, 11213, 2689, 11448, 9603, 11590, 2734, 152, 1543, 3110, 7371, 10714, 1400, 8085, 11689, 11504, 7985, 9856, 1948, 3919, 1624, 12279, 2714, 8158, 11811, 6760, 4065, 11284, 6960, 7186, 2912, 5186, 3512, 10156, 4384, 1111, 70, 9988, 4888, 284, 2380, 7008, 1320, 2951, 7214, 4198, 6300, 749, 11382, 8498, 9389, 7810, 7707, 4559, 1531, 2519, 4506, 5944, 11907, 241, 8735, 3319, 10185, 7469, 11419, 9591, 11994, 4686, 3357, 11052, 4793, 10694, 4049, 12036, 541, 4952, 11049, 6796, 11453, 4089, 5958, 5735, 3537, 9125, 11372, 368, 7277, 11778, 43, 2988, 12127, 11239, 4591, 9636, 10058, 288, 10624, 5784, 1395, 9705, 2614, 10877, 6736, 3956, 4848, 7559, 6162, 11549, 3494, 6776, 8269, 669, 4025, 11228, 9923, 3371, 11148, 12108, 2041, 7880, 11675, 8136, 9073, 578, 11077, 1028, 8442, 4680, 7273, 6763, 7895, 4111, 9415, 11853, 4993, 550, 10361, 10132, 10064, 2741, 10498, 9168, 3754, 11029, 3647, 11236, 10547, 7025, 7889, 2743, 5223, 4522, 2878, 5483, 5397, 8419, 1943, 4100, 9907, 6660, 7472, 262, 12247, 1700, 3330, 9065, 10002, 454, 6513, 52, 12053, 7846, 12100, 6698, 3188, 5404, 11680, 3650, 4730, 6891, 11593, 6093, 9768, 5340, 8127, 9400, 997, 885, 1338, 11881, 6700, 929, 11568, 2367, 1357, 10875, 4410, 8084, 8091, 11255, 9447, 1981, 1925, 6492, 6486, 872, 8240, 9552, 10564, 2948, 1701, 2796, 9535, 9864, 5358, 3885, 5892, 3643, 10174, 9958, 3005, 6968, 5440, 4613, 5693, 743, 9748, 8377, 9191, 5672, 8324, 6716, 5961, 6045, 12046, 10743, 2767, 12263, 4500, 673, 11155, 1896, 1021, 650, 2323, 5151, 11175, 6142, 6123, 8756, 5858, 3071, 10136, 7525, 8657, 426, 10381, 8135, 2829, 1067, 9966, 7750, 8768, 10085, 3053, 8902, 7198, 4192, 5594, 9015, 9312, 10707, 2110, 3440, 2556, 4243, 9697, 4564, 10382, 4582, 564, 4560, 10959, 8731, 7957, 2317, 1732, 6083, 7808, 11260, 5788, 6535, 9216, 7997, 10935, 8896, 11932, 11520, 2918, 2430, 6080, 8147, 4927, 9260, 7751, 526, 8422, 4348, 7337, 6090, 11992, 11117, 2752, 471, 2427, 5871, 4447, 7962, 11827, 281, 3726, 11340, 3979, 9538, 687, 8357, 7291, 9739, 7979, 9761]
    index = 0
    for line in input_file1.readlines():
        if index % 12287 in new_index_list:
            output_file_infer.write(line)
        else:
            output_file_train.write(line)
        index += 1

    new_index_list = [1835, 2149, 2414, 4932, 2348, 2206, 4641, 6292, 539, 3305, 5015, 5272, 4269, 9025, 2436, 8570, 10163, 6302, 6464, 10459, 780, 4774, 9509, 8989, 7230, 1045, 1210, 415, 4124, 2587, 876, 9127, 6098, 9944, 7728, 1131, 1397, 3722, 1957, 6394, 10687, 991, 6338, 1122, 8649, 7087, 6179, 10834, 2064, 8977, 3094, 1386, 7960, 891, 8405, 7253, 7631, 5860, 8589, 6622, 452, 9803, 10279, 4722, 6948, 10843, 5789, 7572, 2376, 2998, 702, 2426, 8944, 7717, 1088, 4812, 3050, 1275, 954, 6018, 1881, 8744, 7305, 8582, 4400, 8746, 3595, 5223, 8444, 3924, 7282, 10045, 5201, 9692, 622, 4667, 6683, 9397, 5991, 7646, 10007, 496, 8279, 2068, 4578, 3307, 8606, 3749, 6451, 9495, 1925, 981, 10490, 363, 422, 1371, 6522, 9688, 4326, 1710, 10423, 9197, 3325, 10564, 4881, 8469, 6848, 10385, 2845, 10080, 7084, 9489, 4902, 3922, 1204, 4633, 10282, 6966, 1632, 6923, 6106, 3430, 6346, 3452, 21, 8650, 8745, 3946, 1266, 7545, 5930, 3769, 7837, 10822, 8145, 6808, 343, 8230, 10339, 437, 4446, 1914, 3773, 5644, 7749, 1226, 4674, 4892, 5489, 7273, 8359, 1193, 7135, 6158, 10215, 5620, 6072, 7335, 3526, 7765, 1095, 5418, 1109, 7949, 608, 3631, 5948, 6716, 7333, 5684, 9914, 10322, 8449, 2929, 6277, 7692, 9357, 1846, 3441, 8121, 8534, 1682, 7411, 1665, 2601, 6249, 3891, 8428, 7810, 10510, 4502, 1198, 2784, 6434, 4644, 2521, 6834, 2597, 786, 3187, 10684, 5210, 3869, 5847, 6798, 5819, 8803, 2635, 9429, 4015, 5266, 5051, 3912, 6975, 2539, 5340, 2382, 7653, 2304, 7896, 10246, 3418, 6161, 9613, 1175, 4454, 9047, 1369, 9031, 105, 10593, 2148, 8535, 5543, 1212, 6626, 6218, 4358, 2981, 9064, 4432, 818, 10213, 7908, 2353, 9968, 2908, 6178, 9730, 10831, 8970, 8259, 4740, 1205, 3740, 10323, 10413, 9487, 5813, 337, 8267, 5356, 7938, 4039, 3435, 4439, 9446, 43, 3334, 1362, 1750, 298, 7149, 4806, 8810, 589, 5287, 1499, 2306, 2834, 963, 2918, 9642, 8353, 9339, 3918, 2615, 1742, 4237, 7517, 1654, 227, 9580, 4490, 1425, 5436, 10181, 935, 8552, 9856, 6283, 5131, 1548, 6317, 10431, 1074, 336, 9469, 7959, 9442, 1976, 1696, 5046, 6452, 4362, 350, 6924, 10292, 3103, 7129, 3138, 2097, 8296, 2480, 10268, 4509, 7608, 3668, 4913, 8129, 10472, 4827, 7511, 3497, 8417, 8219, 4222, 4179, 4453, 2429, 5146, 9906, 4090, 4303, 3416, 7120, 2894, 8065, 1171, 9709, 4885, 3692, 9827, 4241, 134, 1094, 7830, 462, 8391, 8659, 1823, 8593, 6752, 10512, 9228, 2427, 8807, 5239, 6592, 9373, 4666, 4403, 3739, 8193, 8670, 10349, 6208, 10602, 125, 5227, 6281, 5399, 7434, 13, 6423, 1753, 5451, 9521, 2402, 4467, 1244, 7557, 8847, 1688, 8093, 8404, 4801, 185, 9408, 3767, 5706, 7729, 2060, 3211, 7856, 5413, 817, 7023, 9462, 4071, 7324, 5714, 8752, 5942, 6824, 7496, 1904, 10785, 8451, 6193, 637, 5594, 4704, 2171, 7033, 7467, 9918, 8167, 1141, 8289, 10637, 8026, 4157, 10412, 4221, 8662, 2559, 1046, 5896, 5817, 379, 1789, 10177, 7874, 3499, 4053, 433, 3685, 5744, 7747, 9766, 3550, 8380, 3756, 2917, 7950, 5663, 7447, 9140, 2283, 8663, 5983, 3085, 8623, 9532, 9630, 7671, 1769, 8624, 9123, 8035, 6222, 7058, 10481, 6842, 69, 8010, 3854, 7357, 9691, 1083, 4670, 1501, 4612, 497, 3964, 8828, 4418, 3270, 3126, 10020, 6280, 5434, 6089, 4543, 9332, 1759, 8042, 2540, 128, 9543, 7065, 1518, 4516, 7045, 3883, 258, 2000, 9261, 820, 6930, 1405, 1349, 5198, 6445, 3479, 6096, 5517, 8370, 5616, 9388, 4042, 8937, 1599, 2030, 10190, 6407, 6, 9780, 10416, 7828, 4944, 5577, 2095, 3907, 1585, 9633, 8700, 9104, 7816, 7905, 24, 7162, 5537, 10004, 3102, 5256, 8686, 4055, 7746, 9841, 10528, 7428, 2053, 2607, 2488, 665, 6242, 6002, 1391, 9922, 5385, 9966, 4794, 962, 10239, 2524, 5180, 7199, 1960, 6564, 4527, 1793, 3386, 4102, 5457, 3411, 1474, 1457, 601, 1495, 3096, 5788, 5861, 1390, 1259, 4070, 8858, 4239, 9256, 6886, 8616, 1099, 6204, 9934, 3492, 6963, 9864, 9503, 703, 1556, 10068, 10217, 4477, 4710, 8352, 2871, 7236, 6055, 8889, 841, 10397, 164, 9323, 4336, 5425, 8054, 6486, 10521, 729, 8844, 5969, 10418, 6985, 3493, 1159, 1636, 4031, 7435, 3485, 1101, 4658, 10583, 10850, 9210, 9090, 3427, 2256, 1307, 2265, 8735, 1905, 3461, 6596, 154, 182, 9096, 9784, 5200, 7108, 9343, 4493, 2533, 5848, 86, 7787, 6956, 8678, 8755, 9768, 7267, 5550, 4198, 1964, 7871, 10631, 3328, 3539, 6524, 10193, 3251, 177, 4356, 6214, 10743, 4304, 2616, 4972, 42, 4683, 349, 680, 2105, 9689, 3825, 279, 3002, 2349, 1505, 6735, 6911, 2942, 3482, 2574, 6845, 4110, 8689, 5247, 7322, 3072, 5741, 4263, 4920, 8568, 2679, 8052, 1437, 3721, 8893, 126, 4942, 3451, 6512, 5190, 356, 5841, 2767, 9235, 5485, 8554, 9278, 10039, 7465, 5773, 8141, 10679, 2583, 10417, 7136, 783, 10756, 8331, 8224, 3315, 1800, 3143, 6066, 10585, 999, 2069, 47, 9274, 3220, 2055, 512, 10092, 6235, 663, 9093, 2118, 6822, 7373, 6780, 2850, 473, 2887, 5681, 2542, 1184, 5306, 6455, 2198, 6976, 5391, 9353, 498, 2112, 8410, 5566, 8097, 4878, 8629, 6164, 716, 2956, 946, 1855, 3727, 10518, 3448, 5534, 7442, 7534, 7607, 6615, 2070, 7041, 2941, 3001, 7443, 6868, 2700, 7000, 8326, 9461, 9152, 7004, 9225, 309, 219, 8201, 7401, 8114, 271, 1754, 2810, 5355, 9268, 5972, 10781, 9, 932, 4732, 2133, 1847, 592, 9230, 10623, 1540, 1058, 615, 3621, 695, 9961, 5405, 9874, 9815, 10614, 2877, 2761, 8387, 4778, 5865, 10369, 1434, 3303, 1508, 7834, 9438, 4814, 4374, 6516, 7202, 8221, 7634, 3455, 5233, 2182, 4325, 3720, 7216, 8695, 4966, 7887, 1399, 1435, 5508, 7599, 4024, 2721, 1762, 6570, 4121, 1527, 5632, 4013, 6138, 7128, 5720, 8754, 10053, 8047, 2541, 1315, 623, 10083, 7936, 8409, 10674, 9620, 5477, 3514, 5555, 4173, 4200, 2486, 6411, 3559, 6897, 2742, 9328, 8307, 5231, 8808, 3664, 1604, 6513, 3376, 1968, 6738, 2747, 10453, 2202, 10764, 3390, 886, 9646, 10563, 5953, 10312, 6085, 10105, 8625, 5076, 8973, 2046, 9835, 1955, 9761, 3465, 6038, 2231, 4382, 1395, 10757, 7606, 3023, 184, 1491, 10360, 10420, 45, 1489, 7361, 7566, 6791, 3248, 8785, 692, 7387, 9607, 4435, 3695, 1470, 4901, 9589, 9147, 9420, 1671, 4148, 8244, 3994, 831, 9920, 9510, 1252, 10319, 1417, 7363, 3520, 9238, 1167, 1631, 901, 6977, 7835, 7242, 2944, 8976, 1854, 1712, 2200, 5939, 4484, 504, 6514, 9557, 3362, 6412, 2614]
    index = 0
    for line in input_file2.readlines():
        if index % 10860 in new_index_list:
            output_file_infer.write(line)
        else:
            output_file_train.write(line)
        index += 1

    for line in input_file3.readlines():
        output_file_train.write(line)

    output_file_train.close()
    output_file_infer.close()


def extract1():
    pre="new_ogpubfilter_output/"
    input_file1 = open(args.in_path + pre + "train.json", "r", encoding="utf-8")
    input_file2 = open(args.in_path + pre + "fu_train.json", "r", encoding="utf-8")
    input_file3 = open(args.in_path + pre + "chu_test.json", "r", encoding="utf-8")
    output_file_train = open(args.in_path + pre + "new_train.json", "w", encoding="utf-8")
    output_file_infer = open(args.in_path + pre + "new_infer.json", "w", encoding="utf-8")
    print("Reading from {}{}, writing to {}{}".format(
        input_file1.name, input_file2.name, output_file_train.name, output_file_infer.name))
    new_index_list = [2312, 10649, 1740, 11237, 11909, 11183, 5315, 12236, 10837, 710, 5413, 7241, 1721, 11070, 3949, 838, 11971, 8081, 1987, 11983, 11917, 9404, 8277, 9746, 11452, 5300, 6642, 2705, 10201, 8042, 11888, 5745, 4720, 11709, 11739, 7651, 10476, 3203, 3055, 4369, 1823, 10745, 1414, 4298, 1562, 4960, 4062, 8180, 6858, 4123, 207, 5325, 2892, 2102, 7885, 6338, 10599, 1117, 4930, 9436, 10630, 7490, 11752, 9308, 4835, 11147, 3200, 2339, 11089, 2582, 9959, 9484, 11984, 9070, 5336, 2844, 10010, 599, 10419, 6260, 1646, 3552, 6802, 6604, 790, 12099, 4747, 7468, 6650, 4321, 2872, 10655, 727, 9861, 8279, 2836, 9051, 10991, 2228, 10437, 6653, 7144, 4727, 190, 313, 11895, 8307, 7974, 5207, 2377, 1046, 11706, 5409, 8343, 6081, 9804, 7477, 10316, 9481, 7648, 3610, 11756, 4693, 4962, 8682, 12132, 9760, 10903, 8305, 701, 10499, 5822, 9832, 9734, 12110, 5307, 1934, 8267, 10079, 10762, 7652, 6762, 6207, 5304, 2107, 2411, 6340, 6403, 5102, 4719, 6626, 277, 7060, 9290, 9449, 4216, 7021, 10592, 8499, 8046, 5005, 839, 5740, 12215, 2229, 11597, 8583, 4231, 6291, 11713, 8411, 9371, 11831, 2899, 10881, 10731, 5175, 11944, 7092, 9237, 6480, 1643, 2218, 11380, 4709, 4488, 11081, 3297, 668, 8467, 10544, 11090, 2477, 2817, 3806, 11422, 11559, 4889, 4530, 3938, 1150, 4338, 5073, 1434, 8293, 208, 8705, 478, 7251, 10070, 2500, 10552, 8188, 2615, 8710, 6056, 164, 11499, 7066, 2296, 9519, 1860, 10610, 831, 10068, 7760, 8217, 10902, 10163, 5372, 7605, 9785, 4545, 216, 12170, 6119, 1258, 700, 7504, 3370, 5277, 11956, 2316, 7052, 10218, 2461, 3072, 11763, 5523, 9419, 10317, 3804, 7688, 3082, 6084, 4573, 3851, 3844, 7298, 995, 11563, 10934, 1011, 12151, 11210, 7993, 1424, 5087, 9490, 9580, 6420, 704, 7431, 5463, 10354, 9348, 5364, 6656, 6148, 1885, 7334, 10097, 7400, 6777, 5990, 4913, 9044, 5496, 9562, 3478, 8978, 8430, 6514, 12224, 11276, 8736, 7441, 6792, 1956, 10845, 1636, 605, 3458, 5448, 302, 9948, 1998, 1348, 2855, 3417, 11762, 847, 5586, 12106, 6149, 2765, 5667, 9514, 10620, 3909, 1261, 4572, 8904, 12048, 4638, 7949, 12105, 10272, 3368, 964, 11889, 4687, 3262, 3901, 8745, 1608, 8423, 11661, 7061, 6562, 322, 10371, 9417, 1137, 3606, 8671, 4489, 5687, 9130, 8570, 334, 9321, 1263, 3265, 6975, 4113, 4168, 5421, 1916, 4769, 172, 1295, 4661, 9584, 8225, 11133, 2579, 146, 8969, 6708, 2233, 4723, 10833, 8360, 9704, 6155, 8171, 4581, 10168, 898, 1565, 3589, 8900, 2081, 2061, 4695, 1187, 342, 2786, 9932, 5722, 1794, 10376, 2271, 7248, 6800, 6552, 6675, 3345, 3316, 10979, 421, 378, 10880, 3599, 11004, 8005, 3083, 5432, 7814, 9238, 1892, 3127, 5955, 10533, 6267, 8744, 2141, 9243, 9205, 835, 5374, 4603, 5069, 4701, 11413, 4880, 2028, 8331, 11290, 11960, 1014, 10884, 6352, 3713, 9690, 8020, 6010, 1832, 153, 5505, 4656, 10287, 553, 9731, 8414, 1703, 7299, 2445, 6178, 8152, 10101, 10861, 9887, 7237, 10615, 5411, 5017, 9899, 5800, 12145, 8139, 6553, 6345, 7960, 7235, 8519, 10048, 8251, 7384, 452, 2828, 7918, 6839, 11533, 7311, 11108, 10512, 9599, 10165, 491, 2768, 11647, 10618, 4414, 10717, 7091, 8837, 11999, 6026, 113, 362, 5909, 11868, 10506, 10756, 10586, 8846, 9283, 10824, 4067, 2106, 9587, 1884, 11266, 9127, 7520, 3880, 4636, 5061, 8598, 720, 3014, 4963, 7131, 8840, 7586, 7355, 1480, 6279, 4031, 5503, 5305, 393, 7073, 10369, 1645, 8742, 7270, 11086, 1506, 4758, 85, 2442, 12114, 994, 4115, 11794, 11016, 4891, 12086, 6223, 8619, 10866, 2458, 6122, 12207, 9634, 3879, 3039, 6948, 2261, 6168, 10014, 9961, 10789, 3146, 8723, 2062, 3277, 4682, 1061, 1135, 2431, 8575, 4570, 6107, 874, 7753, 4737, 8250, 4684, 6761, 7791, 2132, 833, 648, 9632, 1145, 1655, 3275, 6222, 8707, 8408, 1012, 4465, 9430, 2491, 4008, 4327, 8347, 11443, 5430, 10508, 11500, 9428, 6157, 8888, 6581, 979, 2506, 62, 249, 4974, 4668, 3209, 5164, 196, 7892, 5801, 9644, 2273, 4901, 9095, 2605, 1202, 803, 3102, 8988, 4382, 9477, 6946, 3801, 136, 10939, 7418, 10433, 7379, 6569, 11643, 11168, 10240, 2580, 11426, 2222, 11968, 5097, 3081, 11359, 3803, 1912, 11955, 3382, 4475, 8980, 6007, 9040, 523, 11957, 10660, 9521, 538, 11387, 374, 8198, 8530, 5045, 4301, 8990, 5670, 5959, 2017, 4525, 5783, 7365, 7333, 12187, 11595, 3632, 2847, 6955, 11213, 2689, 11448, 9603, 11590, 2734, 152, 1543, 3110, 7371, 10714, 1400, 8085, 11689, 11504, 7985, 9856, 1948, 3919, 1624, 12279, 2714, 8158, 11811, 6760, 4065, 11284, 6960, 7186, 2912, 5186, 3512, 10156, 4384, 1111, 70, 9988, 4888, 284, 2380, 7008, 1320, 2951, 7214, 4198, 6300, 749, 11382, 8498, 9389, 7810, 7707, 4559, 1531, 2519, 4506, 5944, 11907, 241, 8735, 3319, 10185, 7469, 11419, 9591, 11994, 4686, 3357, 11052, 4793, 10694, 4049, 12036, 541, 4952, 11049, 6796, 11453, 4089, 5958, 5735, 3537, 9125, 11372, 368, 7277, 11778, 43, 2988, 12127, 11239, 4591, 9636, 10058, 288, 10624, 5784, 1395, 9705, 2614, 10877, 6736, 3956, 4848, 7559, 6162, 11549, 3494, 6776, 8269, 669, 4025, 11228, 9923, 3371, 11148, 12108, 2041, 7880, 11675, 8136, 9073, 578, 11077, 1028, 8442, 4680, 7273, 6763, 7895, 4111, 9415, 11853, 4993, 550, 10361, 10132, 10064, 2741, 10498, 9168, 3754, 11029, 3647, 11236, 10547, 7025, 7889, 2743, 5223, 4522, 2878, 5483, 5397, 8419, 1943, 4100, 9907, 6660, 7472, 262, 12247, 1700, 3330, 9065, 10002, 454, 6513, 52, 12053, 7846, 12100, 6698, 3188, 5404, 11680, 3650, 4730, 6891, 11593, 6093, 9768, 5340, 8127, 9400, 997, 885, 1338, 11881, 6700, 929, 11568, 2367, 1357, 10875, 4410, 8084, 8091, 11255, 9447, 1981, 1925, 6492, 6486, 872, 8240, 9552, 10564, 2948, 1701, 2796, 9535, 9864, 5358, 3885, 5892, 3643, 10174, 9958, 3005, 6968, 5440, 4613, 5693, 743, 9748, 8377, 9191, 5672, 8324, 6716, 5961, 6045, 12046, 10743, 2767, 12263, 4500, 673, 11155, 1896, 1021, 650, 2323, 5151, 11175, 6142, 6123, 8756, 5858, 3071, 10136, 7525, 8657, 426, 10381, 8135, 2829, 1067, 9966, 7750, 8768, 10085, 3053, 8902, 7198, 4192, 5594, 9015, 9312, 10707, 2110, 3440, 2556, 4243, 9697, 4564, 10382, 4582, 564, 4560, 10959, 8731, 7957, 2317, 1732, 6083, 7808, 11260, 5788, 6535, 9216, 7997, 10935, 8896, 11932, 11520, 2918, 2430, 6080, 8147, 4927, 9260, 7751, 526, 8422, 4348, 7337, 6090, 11992, 11117, 2752, 471, 2427, 5871, 4447, 7962, 11827, 281, 3726, 11340, 3979, 9538, 687, 8357, 7291, 9739, 7979, 9761]
    index = 0
    for line in input_file1.readlines():
        if index % 12287 in new_index_list:
            output_file_infer.write(line)
        else:
            output_file_train.write(line)
        index += 1

    new_index_list = [1835, 2149, 2414, 4932, 2348, 2206, 4641, 6292, 539, 3305, 5015, 5272, 4269, 9025, 2436, 8570, 10163, 6302, 6464, 10459, 780, 4774, 9509, 8989, 7230, 1045, 1210, 415, 4124, 2587, 876, 9127, 6098, 9944, 7728, 1131, 1397, 3722, 1957, 6394, 10687, 991, 6338, 1122, 8649, 7087, 6179, 10834, 2064, 8977, 3094, 1386, 7960, 891, 8405, 7253, 7631, 5860, 8589, 6622, 452, 9803, 10279, 4722, 6948, 10843, 5789, 7572, 2376, 2998, 702, 2426, 8944, 7717, 1088, 4812, 3050, 1275, 954, 6018, 1881, 8744, 7305, 8582, 4400, 8746, 3595, 5223, 8444, 3924, 7282, 10045, 5201, 9692, 622, 4667, 6683, 9397, 5991, 7646, 10007, 496, 8279, 2068, 4578, 3307, 8606, 3749, 6451, 9495, 1925, 981, 10490, 363, 422, 1371, 6522, 9688, 4326, 1710, 10423, 9197, 3325, 10564, 4881, 8469, 6848, 10385, 2845, 10080, 7084, 9489, 4902, 3922, 1204, 4633, 10282, 6966, 1632, 6923, 6106, 3430, 6346, 3452, 21, 8650, 8745, 3946, 1266, 7545, 5930, 3769, 7837, 10822, 8145, 6808, 343, 8230, 10339, 437, 4446, 1914, 3773, 5644, 7749, 1226, 4674, 4892, 5489, 7273, 8359, 1193, 7135, 6158, 10215, 5620, 6072, 7335, 3526, 7765, 1095, 5418, 1109, 7949, 608, 3631, 5948, 6716, 7333, 5684, 9914, 10322, 8449, 2929, 6277, 7692, 9357, 1846, 3441, 8121, 8534, 1682, 7411, 1665, 2601, 6249, 3891, 8428, 7810, 10510, 4502, 1198, 2784, 6434, 4644, 2521, 6834, 2597, 786, 3187, 10684, 5210, 3869, 5847, 6798, 5819, 8803, 2635, 9429, 4015, 5266, 5051, 3912, 6975, 2539, 5340, 2382, 7653, 2304, 7896, 10246, 3418, 6161, 9613, 1175, 4454, 9047, 1369, 9031, 105, 10593, 2148, 8535, 5543, 1212, 6626, 6218, 4358, 2981, 9064, 4432, 818, 10213, 7908, 2353, 9968, 2908, 6178, 9730, 10831, 8970, 8259, 4740, 1205, 3740, 10323, 10413, 9487, 5813, 337, 8267, 5356, 7938, 4039, 3435, 4439, 9446, 43, 3334, 1362, 1750, 298, 7149, 4806, 8810, 589, 5287, 1499, 2306, 2834, 963, 2918, 9642, 8353, 9339, 3918, 2615, 1742, 4237, 7517, 1654, 227, 9580, 4490, 1425, 5436, 10181, 935, 8552, 9856, 6283, 5131, 1548, 6317, 10431, 1074, 336, 9469, 7959, 9442, 1976, 1696, 5046, 6452, 4362, 350, 6924, 10292, 3103, 7129, 3138, 2097, 8296, 2480, 10268, 4509, 7608, 3668, 4913, 8129, 10472, 4827, 7511, 3497, 8417, 8219, 4222, 4179, 4453, 2429, 5146, 9906, 4090, 4303, 3416, 7120, 2894, 8065, 1171, 9709, 4885, 3692, 9827, 4241, 134, 1094, 7830, 462, 8391, 8659, 1823, 8593, 6752, 10512, 9228, 2427, 8807, 5239, 6592, 9373, 4666, 4403, 3739, 8193, 8670, 10349, 6208, 10602, 125, 5227, 6281, 5399, 7434, 13, 6423, 1753, 5451, 9521, 2402, 4467, 1244, 7557, 8847, 1688, 8093, 8404, 4801, 185, 9408, 3767, 5706, 7729, 2060, 3211, 7856, 5413, 817, 7023, 9462, 4071, 7324, 5714, 8752, 5942, 6824, 7496, 1904, 10785, 8451, 6193, 637, 5594, 4704, 2171, 7033, 7467, 9918, 8167, 1141, 8289, 10637, 8026, 4157, 10412, 4221, 8662, 2559, 1046, 5896, 5817, 379, 1789, 10177, 7874, 3499, 4053, 433, 3685, 5744, 7747, 9766, 3550, 8380, 3756, 2917, 7950, 5663, 7447, 9140, 2283, 8663, 5983, 3085, 8623, 9532, 9630, 7671, 1769, 8624, 9123, 8035, 6222, 7058, 10481, 6842, 69, 8010, 3854, 7357, 9691, 1083, 4670, 1501, 4612, 497, 3964, 8828, 4418, 3270, 3126, 10020, 6280, 5434, 6089, 4543, 9332, 1759, 8042, 2540, 128, 9543, 7065, 1518, 4516, 7045, 3883, 258, 2000, 9261, 820, 6930, 1405, 1349, 5198, 6445, 3479, 6096, 5517, 8370, 5616, 9388, 4042, 8937, 1599, 2030, 10190, 6407, 6, 9780, 10416, 7828, 4944, 5577, 2095, 3907, 1585, 9633, 8700, 9104, 7816, 7905, 24, 7162, 5537, 10004, 3102, 5256, 8686, 4055, 7746, 9841, 10528, 7428, 2053, 2607, 2488, 665, 6242, 6002, 1391, 9922, 5385, 9966, 4794, 962, 10239, 2524, 5180, 7199, 1960, 6564, 4527, 1793, 3386, 4102, 5457, 3411, 1474, 1457, 601, 1495, 3096, 5788, 5861, 1390, 1259, 4070, 8858, 4239, 9256, 6886, 8616, 1099, 6204, 9934, 3492, 6963, 9864, 9503, 703, 1556, 10068, 10217, 4477, 4710, 8352, 2871, 7236, 6055, 8889, 841, 10397, 164, 9323, 4336, 5425, 8054, 6486, 10521, 729, 8844, 5969, 10418, 6985, 3493, 1159, 1636, 4031, 7435, 3485, 1101, 4658, 10583, 10850, 9210, 9090, 3427, 2256, 1307, 2265, 8735, 1905, 3461, 6596, 154, 182, 9096, 9784, 5200, 7108, 9343, 4493, 2533, 5848, 86, 7787, 6956, 8678, 8755, 9768, 7267, 5550, 4198, 1964, 7871, 10631, 3328, 3539, 6524, 10193, 3251, 177, 4356, 6214, 10743, 4304, 2616, 4972, 42, 4683, 349, 680, 2105, 9689, 3825, 279, 3002, 2349, 1505, 6735, 6911, 2942, 3482, 2574, 6845, 4110, 8689, 5247, 7322, 3072, 5741, 4263, 4920, 8568, 2679, 8052, 1437, 3721, 8893, 126, 4942, 3451, 6512, 5190, 356, 5841, 2767, 9235, 5485, 8554, 9278, 10039, 7465, 5773, 8141, 10679, 2583, 10417, 7136, 783, 10756, 8331, 8224, 3315, 1800, 3143, 6066, 10585, 999, 2069, 47, 9274, 3220, 2055, 512, 10092, 6235, 663, 9093, 2118, 6822, 7373, 6780, 2850, 473, 2887, 5681, 2542, 1184, 5306, 6455, 2198, 6976, 5391, 9353, 498, 2112, 8410, 5566, 8097, 4878, 8629, 6164, 716, 2956, 946, 1855, 3727, 10518, 3448, 5534, 7442, 7534, 7607, 6615, 2070, 7041, 2941, 3001, 7443, 6868, 2700, 7000, 8326, 9461, 9152, 7004, 9225, 309, 219, 8201, 7401, 8114, 271, 1754, 2810, 5355, 9268, 5972, 10781, 9, 932, 4732, 2133, 1847, 592, 9230, 10623, 1540, 1058, 615, 3621, 695, 9961, 5405, 9874, 9815, 10614, 2877, 2761, 8387, 4778, 5865, 10369, 1434, 3303, 1508, 7834, 9438, 4814, 4374, 6516, 7202, 8221, 7634, 3455, 5233, 2182, 4325, 3720, 7216, 8695, 4966, 7887, 1399, 1435, 5508, 7599, 4024, 2721, 1762, 6570, 4121, 1527, 5632, 4013, 6138, 7128, 5720, 8754, 10053, 8047, 2541, 1315, 623, 10083, 7936, 8409, 10674, 9620, 5477, 3514, 5555, 4173, 4200, 2486, 6411, 3559, 6897, 2742, 9328, 8307, 5231, 8808, 3664, 1604, 6513, 3376, 1968, 6738, 2747, 10453, 2202, 10764, 3390, 886, 9646, 10563, 5953, 10312, 6085, 10105, 8625, 5076, 8973, 2046, 9835, 1955, 9761, 3465, 6038, 2231, 4382, 1395, 10757, 7606, 3023, 184, 1491, 10360, 10420, 45, 1489, 7361, 7566, 6791, 3248, 8785, 692, 7387, 9607, 4435, 3695, 1470, 4901, 9589, 9147, 9420, 1671, 4148, 8244, 3994, 831, 9920, 9510, 1252, 10319, 1417, 7363, 3520, 9238, 1167, 1631, 901, 6977, 7835, 7242, 2944, 8976, 1854, 1712, 2200, 5939, 4484, 504, 6514, 9557, 3362, 6412, 2614]
    index = 0
    for line in input_file2.readlines():
        if index % 10860 in new_index_list:
            output_file_infer.write(line)
        else:
            output_file_train.write(line)
        index += 1

    for line in input_file3.readlines():
        output_file_train.write(line)

    output_file_train.close()
    output_file_infer.close()


def remove_small_sentence(str1):
    pre = "output/过度生成+过滤后用于在NLI过程中微调BERT的数据集/"
    out_pre="output/filter_small/"
    input_file = open(args.in_path + pre + str1, "r", encoding='utf-8')
    output_file = open(args.out_path + out_pre + str1, "w", encoding='utf-8')
    all_sentences_num=0.0
    small_sentences_num=0.0
    for line in input_file.readlines():
        all_sentences_num += 1
        doc_item = preprocess_doc(line.strip())
        if len(doc_item["sentence1"])<10:
            small_sentences_num += 1
            continue
        new_doc_item=doc_item
        output_file.write(json.dumps(new_doc_item,ensure_ascii=False)+"\n")
    print("all_sentences_num={}, small_sentences_num={}, remove {}% sentences".
          format(all_sentences_num,small_sentences_num,small_sentences_num/all_sentences_num*100.0))


def remove_small_sentence1(str1):
    pre = "1648+400+1500+500/用于在NLI过程中微调BERT的数据集/"
    out_pre=pre+"remove_small/"
    input_file = open(args.in_path + pre + str1, "r", encoding='utf-8')
    output_file = open(args.out_path + out_pre + str1, "w", encoding='utf-8')
    all_sentences_num=0.0
    small_sentences_num=0.0
    for line in input_file.readlines():
        all_sentences_num += 1
        doc_item = preprocess_doc(line.strip())
        if len(doc_item["sentence1"])<10:
            small_sentences_num += 1
            continue
        new_doc_item=doc_item
        output_file.write(json.dumps(new_doc_item,ensure_ascii=False)+"\n")
    print("all_sentences_num={}, small_sentences_num={}, remove {}% sentences".
          format(all_sentences_num,small_sentences_num,small_sentences_num/all_sentences_num*100.0))


if __name__ == "__main__":
    if not os.path.exists(args.out_path):
        os.mkdir(args.out_path)
    # print("start")
    # prefix = ["contradiction", "entailment", "neutral"]
    # src = "1648+400+1500+500/"
    # suffix = ["_train", "_test", "_fu_train"]
    # for pre in prefix:
    #     for suf in ["_train","_test","_fu_train"]:
    #         convert_merge(src, "NLI_"+pre+suf+".json")
    # for suf in suffix:
    #     convert_merge(src, "NLI" + suf+".json")
    #
    # print("remove over")

    print("start")
    # extract()
    extract1()
    print("over")

    # print("*****Start filter small sentence (length<10)*****")
    # for prefix in ["train.json","test.json","dev.json"]:
    #     # remove_small_sentence(prefix)  # remove 过度生成的短句子
    #     remove_small_sentence1(prefix)  # remove 没过度生成的短句子
    #     print("*****complete filter {} data*****",format(prefix))
    # print("*****complete filter all filtered data*****")
